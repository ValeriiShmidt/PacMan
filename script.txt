sbcl --load quicklisp.lisp

;; Завантажуємо бібліотеку CL-CSV для зчитування .csv-файлів
(ql:quickload "cl-csv")

;; Зчитуємо .csv файл та зберігаємо його у змінну, як список списків
(defparameter *input-table* (cl-csv:read-csv #P"results.csv"))

;; Із файлу column.csv отримуєм заголовки
(defparameter *cols-to-keep-by-name*
  (car (cl-csv:read-csv #P"columns.csv")))


;; Отримуєм заголовки таблиці з першої csv, яка збережена у змінній input-table
;; і зберігаємо її у header-input-table
(defparameter *header-input-table* (car *input-table*))

;; Визначаємо функцію, яка повідомляє нам позицію певного імені стовпця.
;; Ми надаємо йому назву стовпця, наприклад. «time»,
;; потім він повідомляє нам, у якій позиції знаходиться цей конкретний стовпець
(defun get-col-position (col-name)
  "Get the position number of a column by the column name."
  (position col-name *header-input-table* :test #'string=))

;; Коли ми зіставляємо цю функцію з назвою кожного стовпця в нашому списку заголовків стовпців,
;; ми отримуємо список позицій стовпців, які ми хочемо зберегти.
;; Ми зберігаємо цей список у змінній cols-to-keep-by-position
(defparameter *cols-to-keep-by-position*
  (mapcar #'get-col-position *cols-to-keep-by-name*))

;; Фільтруємо вхідний рядок
(defun create-output-row (input-row)
  "Filter a row of the input-table to create a row for the output table."
  (loop for x in *cols-to-keep-by-position* 
        collect (nth x input-row)))

;; Створюємо вихідну таблицю; отримуємо функцію вище
;; і зіставляємо її з кожним елементом списку input-table
(defparameter *output-table*
  (mapcar #'create-output-row *input-table*))

;; Записуємо новий .csv
(cl-csv:write-csv *output-table* :stream #P"new.csv")
